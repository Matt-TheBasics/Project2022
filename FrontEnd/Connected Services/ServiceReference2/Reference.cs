//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodingPackFrontRevised.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Donation", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Donation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DonationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DonationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DonorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PickupAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PickupDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DonationID {
            get {
                return this.DonationIDField;
            }
            set {
                if ((this.DonationIDField.Equals(value) != true)) {
                    this.DonationIDField = value;
                    this.RaisePropertyChanged("DonationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DonationType {
            get {
                return this.DonationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DonationTypeField, value) != true)) {
                    this.DonationTypeField = value;
                    this.RaisePropertyChanged("DonationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DonorID {
            get {
                return this.DonorIDField;
            }
            set {
                if ((this.DonorIDField.Equals(value) != true)) {
                    this.DonorIDField = value;
                    this.RaisePropertyChanged("DonorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PickupAddress {
            get {
                return this.PickupAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.PickupAddressField, value) != true)) {
                    this.PickupAddressField = value;
                    this.RaisePropertyChanged("PickupAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PickupDate {
            get {
                return this.PickupDateField;
            }
            set {
                if ((object.ReferenceEquals(this.PickupDateField, value) != true)) {
                    this.PickupDateField = value;
                    this.RaisePropertyChanged("PickupDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsertypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adress {
            get {
                return this.AdressField;
            }
            set {
                if ((object.ReferenceEquals(this.AdressField, value) != true)) {
                    this.AdressField = value;
                    this.RaisePropertyChanged("Adress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contact {
            get {
                return this.ContactField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactField, value) != true)) {
                    this.ContactField = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Usertype {
            get {
                return this.UsertypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UsertypeField, value) != true)) {
                    this.UsertypeField = value;
                    this.RaisePropertyChanged("Usertype");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Campaign", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Campaign : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CampaignIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Date_fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Date_toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FundraiserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CampaignID {
            get {
                return this.CampaignIDField;
            }
            set {
                if ((this.CampaignIDField.Equals(value) != true)) {
                    this.CampaignIDField = value;
                    this.RaisePropertyChanged("CampaignID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date_from {
            get {
                return this.Date_fromField;
            }
            set {
                if ((object.ReferenceEquals(this.Date_fromField, value) != true)) {
                    this.Date_fromField = value;
                    this.RaisePropertyChanged("Date_from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date_to {
            get {
                return this.Date_toField;
            }
            set {
                if ((object.ReferenceEquals(this.Date_toField, value) != true)) {
                    this.Date_toField = value;
                    this.RaisePropertyChanged("Date_to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fundraiser {
            get {
                return this.FundraiserField;
            }
            set {
                if ((object.ReferenceEquals(this.FundraiserField, value) != true)) {
                    this.FundraiserField = value;
                    this.RaisePropertyChanged("Fundraiser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Schedule", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Schedule : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DonationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DriverIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DonationID {
            get {
                return this.DonationIDField;
            }
            set {
                if ((this.DonationIDField.Equals(value) != true)) {
                    this.DonationIDField = value;
                    this.RaisePropertyChanged("DonationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DriverID {
            get {
                return this.DriverIDField;
            }
            set {
                if ((this.DriverIDField.Equals(value) != true)) {
                    this.DriverIDField = value;
                    this.RaisePropertyChanged("DriverID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskID {
            get {
                return this.TaskIDField;
            }
            set {
                if ((this.TaskIDField.Equals(value) != true)) {
                    this.TaskIDField = value;
                    this.RaisePropertyChanged("TaskID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Registered", ReplyAction="http://tempuri.org/IService/RegisteredResponse")]
        bool Registered(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Registered", ReplyAction="http://tempuri.org/IService/RegisteredResponse")]
        System.Threading.Tasks.Task<bool> RegisteredAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        int Register(string name, string surname, string email, string address, string password, string usertype, string contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task<int> RegisterAsync(string name, string surname, string email, string address, string password, string usertype, string contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        int Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/editUser", ReplyAction="http://tempuri.org/IService/editUserResponse")]
        bool editUser(int userid, string name, string surname, string email, string address, string password, string usertype, string contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/editUser", ReplyAction="http://tempuri.org/IService/editUserResponse")]
        System.Threading.Tasks.Task<bool> editUserAsync(int userid, string name, string surname, string email, string address, string password, string usertype, string contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDonorDonations", ReplyAction="http://tempuri.org/IService/getDonorDonationsResponse")]
        CodingPackFrontRevised.ServiceReference2.Donation[] getDonorDonations(int DonorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDonorDonations", ReplyAction="http://tempuri.org/IService/getDonorDonationsResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getDonorDonationsAsync(int DonorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUser", ReplyAction="http://tempuri.org/IService/getUserResponse")]
        CodingPackFrontRevised.ServiceReference2.User getUser(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUser", ReplyAction="http://tempuri.org/IService/getUserResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User> getUserAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUserB", ReplyAction="http://tempuri.org/IService/getUserBResponse")]
        CodingPackFrontRevised.ServiceReference2.User getUserB(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUserB", ReplyAction="http://tempuri.org/IService/getUserBResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User> getUserBAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCampaign", ReplyAction="http://tempuri.org/IService/getCampaignResponse")]
        CodingPackFrontRevised.ServiceReference2.Campaign getCampaign(int CampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCampaign", ReplyAction="http://tempuri.org/IService/getCampaignResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Campaign> getCampaignAsync(int CampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDonation", ReplyAction="http://tempuri.org/IService/getDonationResponse")]
        CodingPackFrontRevised.ServiceReference2.Donation getDonation(int DonationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDonation", ReplyAction="http://tempuri.org/IService/getDonationResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation> getDonationAsync(int DonationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDonation", ReplyAction="http://tempuri.org/IService/AddDonationResponse")]
        bool AddDonation(int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDonation", ReplyAction="http://tempuri.org/IService/AddDonationResponse")]
        System.Threading.Tasks.Task<bool> AddDonationAsync(int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/editDonation", ReplyAction="http://tempuri.org/IService/editDonationResponse")]
        bool editDonation(int donationid, int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/editDonation", ReplyAction="http://tempuri.org/IService/editDonationResponse")]
        System.Threading.Tasks.Task<bool> editDonationAsync(int donationid, int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllDonations", ReplyAction="http://tempuri.org/IService/getAllDonationsResponse")]
        CodingPackFrontRevised.ServiceReference2.Donation[] getAllDonations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllDonations", ReplyAction="http://tempuri.org/IService/getAllDonationsResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getAllDonationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllRequests", ReplyAction="http://tempuri.org/IService/getAllRequestsResponse")]
        CodingPackFrontRevised.ServiceReference2.Donation[] getAllRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllRequests", ReplyAction="http://tempuri.org/IService/getAllRequestsResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getAllRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllApproved", ReplyAction="http://tempuri.org/IService/getAllApprovedResponse")]
        CodingPackFrontRevised.ServiceReference2.Donation[] getAllApproved();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllApproved", ReplyAction="http://tempuri.org/IService/getAllApprovedResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getAllApprovedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getFrequestDonors", ReplyAction="http://tempuri.org/IService/getFrequestDonorsResponse")]
        int[] getFrequestDonors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getFrequestDonors", ReplyAction="http://tempuri.org/IService/getFrequestDonorsResponse")]
        System.Threading.Tasks.Task<int[]> getFrequestDonorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllUsers", ReplyAction="http://tempuri.org/IService/getAllUsersResponse")]
        CodingPackFrontRevised.ServiceReference2.User[] getAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllUsers", ReplyAction="http://tempuri.org/IService/getAllUsersResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User[]> getAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDonors", ReplyAction="http://tempuri.org/IService/getDonorsResponse")]
        int getDonors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDonors", ReplyAction="http://tempuri.org/IService/getDonorsResponse")]
        System.Threading.Tasks.Task<int> getDonorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAdmins", ReplyAction="http://tempuri.org/IService/getAdminsResponse")]
        int getAdmins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAdmins", ReplyAction="http://tempuri.org/IService/getAdminsResponse")]
        System.Threading.Tasks.Task<int> getAdminsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDrivers", ReplyAction="http://tempuri.org/IService/getDriversResponse")]
        int getDrivers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDrivers", ReplyAction="http://tempuri.org/IService/getDriversResponse")]
        System.Threading.Tasks.Task<int> getDriversAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCampaigns", ReplyAction="http://tempuri.org/IService/getCampaignsResponse")]
        int getCampaigns();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCampaigns", ReplyAction="http://tempuri.org/IService/getCampaignsResponse")]
        System.Threading.Tasks.Task<int> getCampaignsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countAllDonations", ReplyAction="http://tempuri.org/IService/countAllDonationsResponse")]
        int countAllDonations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countAllDonations", ReplyAction="http://tempuri.org/IService/countAllDonationsResponse")]
        System.Threading.Tasks.Task<int> countAllDonationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countAllFrequentDonors", ReplyAction="http://tempuri.org/IService/countAllFrequentDonorsResponse")]
        int countAllFrequentDonors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countAllFrequentDonors", ReplyAction="http://tempuri.org/IService/countAllFrequentDonorsResponse")]
        System.Threading.Tasks.Task<int> countAllFrequentDonorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/bestDonor", ReplyAction="http://tempuri.org/IService/bestDonorResponse")]
        int bestDonor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/bestDonor", ReplyAction="http://tempuri.org/IService/bestDonorResponse")]
        System.Threading.Tasks.Task<int> bestDonorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countbestdonations", ReplyAction="http://tempuri.org/IService/countbestdonationsResponse")]
        int countbestdonations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countbestdonations", ReplyAction="http://tempuri.org/IService/countbestdonationsResponse")]
        System.Threading.Tasks.Task<int> countbestdonationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countDonorDonations", ReplyAction="http://tempuri.org/IService/countDonorDonationsResponse")]
        int countDonorDonations(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countDonorDonations", ReplyAction="http://tempuri.org/IService/countDonorDonationsResponse")]
        System.Threading.Tasks.Task<int> countDonorDonationsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countClothesDonations", ReplyAction="http://tempuri.org/IService/countClothesDonationsResponse")]
        int countClothesDonations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countClothesDonations", ReplyAction="http://tempuri.org/IService/countClothesDonationsResponse")]
        System.Threading.Tasks.Task<int> countClothesDonationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countFoodDonations", ReplyAction="http://tempuri.org/IService/countFoodDonationsResponse")]
        int countFoodDonations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/countFoodDonations", ReplyAction="http://tempuri.org/IService/countFoodDonationsResponse")]
        System.Threading.Tasks.Task<int> countFoodDonationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllAdmin", ReplyAction="http://tempuri.org/IService/getAllAdminResponse")]
        CodingPackFrontRevised.ServiceReference2.User[] getAllAdmin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllAdmin", ReplyAction="http://tempuri.org/IService/getAllAdminResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User[]> getAllAdminAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllDonors", ReplyAction="http://tempuri.org/IService/getAllDonorsResponse")]
        CodingPackFrontRevised.ServiceReference2.User[] getAllDonors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllDonors", ReplyAction="http://tempuri.org/IService/getAllDonorsResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User[]> getAllDonorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddCampaign", ReplyAction="http://tempuri.org/IService/AddCampaignResponse")]
        bool AddCampaign(string name, string description, string datefrom, string dateto, string fundraiser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddCampaign", ReplyAction="http://tempuri.org/IService/AddCampaignResponse")]
        System.Threading.Tasks.Task<bool> AddCampaignAsync(string name, string description, string datefrom, string dateto, string fundraiser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/editCampaign", ReplyAction="http://tempuri.org/IService/editCampaignResponse")]
        bool editCampaign(int campaignid, string name, string description, string datefrom, string dateto, string fundraiser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/editCampaign", ReplyAction="http://tempuri.org/IService/editCampaignResponse")]
        System.Threading.Tasks.Task<bool> editCampaignAsync(int campaignid, string name, string description, string datefrom, string dateto, string fundraiser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllCampaigns", ReplyAction="http://tempuri.org/IService/getAllCampaignsResponse")]
        CodingPackFrontRevised.ServiceReference2.Campaign[] getAllCampaigns();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllCampaigns", ReplyAction="http://tempuri.org/IService/getAllCampaignsResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Campaign[]> getAllCampaignsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/collecteddonations", ReplyAction="http://tempuri.org/IService/collecteddonationsResponse")]
        bool collecteddonations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/collecteddonations", ReplyAction="http://tempuri.org/IService/collecteddonationsResponse")]
        System.Threading.Tasks.Task<bool> collecteddonationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/clothesdonationspermonth", ReplyAction="http://tempuri.org/IService/clothesdonationspermonthResponse")]
        int[] clothesdonationspermonth();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/clothesdonationspermonth", ReplyAction="http://tempuri.org/IService/clothesdonationspermonthResponse")]
        System.Threading.Tasks.Task<int[]> clothesdonationspermonthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fooddonationspermonth", ReplyAction="http://tempuri.org/IService/fooddonationspermonthResponse")]
        int[] fooddonationspermonth();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fooddonationspermonth", ReplyAction="http://tempuri.org/IService/fooddonationspermonthResponse")]
        System.Threading.Tasks.Task<int[]> fooddonationspermonthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/donationsperyear", ReplyAction="http://tempuri.org/IService/donationsperyearResponse")]
        int donationsperyear();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/donationsperyear", ReplyAction="http://tempuri.org/IService/donationsperyearResponse")]
        System.Threading.Tasks.Task<int> donationsperyearAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/scheduledriver", ReplyAction="http://tempuri.org/IService/scheduledriverResponse")]
        int scheduledriver(int donationid, int driverid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/scheduledriver", ReplyAction="http://tempuri.org/IService/scheduledriverResponse")]
        System.Threading.Tasks.Task<int> scheduledriverAsync(int donationid, int driverid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/drivertasks", ReplyAction="http://tempuri.org/IService/drivertasksResponse")]
        CodingPackFrontRevised.ServiceReference2.Schedule[] drivertasks(int driverid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/drivertasks", ReplyAction="http://tempuri.org/IService/drivertasksResponse")]
        System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Schedule[]> drivertasksAsync(int driverid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/saveimage", ReplyAction="http://tempuri.org/IService/saveimageResponse")]
        int saveimage(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/saveimage", ReplyAction="http://tempuri.org/IService/saveimageResponse")]
        System.Threading.Tasks.Task<int> saveimageAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/returnimage", ReplyAction="http://tempuri.org/IService/returnimageResponse")]
        string returnimage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/returnimage", ReplyAction="http://tempuri.org/IService/returnimageResponse")]
        System.Threading.Tasks.Task<string> returnimageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/returnrandomstring", ReplyAction="http://tempuri.org/IService/returnrandomstringResponse")]
        string returnrandomstring();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/returnrandomstring", ReplyAction="http://tempuri.org/IService/returnrandomstringResponse")]
        System.Threading.Tasks.Task<string> returnrandomstringAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : CodingPackFrontRevised.ServiceReference2.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<CodingPackFrontRevised.ServiceReference2.IService>, CodingPackFrontRevised.ServiceReference2.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Registered(string email, string password) {
            return base.Channel.Registered(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisteredAsync(string email, string password) {
            return base.Channel.RegisteredAsync(email, password);
        }
        
        public int Register(string name, string surname, string email, string address, string password, string usertype, string contact) {
            return base.Channel.Register(name, surname, email, address, password, usertype, contact);
        }
        
        public System.Threading.Tasks.Task<int> RegisterAsync(string name, string surname, string email, string address, string password, string usertype, string contact) {
            return base.Channel.RegisterAsync(name, surname, email, address, password, usertype, contact);
        }
        
        public int Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public bool editUser(int userid, string name, string surname, string email, string address, string password, string usertype, string contact) {
            return base.Channel.editUser(userid, name, surname, email, address, password, usertype, contact);
        }
        
        public System.Threading.Tasks.Task<bool> editUserAsync(int userid, string name, string surname, string email, string address, string password, string usertype, string contact) {
            return base.Channel.editUserAsync(userid, name, surname, email, address, password, usertype, contact);
        }
        
        public CodingPackFrontRevised.ServiceReference2.Donation[] getDonorDonations(int DonorID) {
            return base.Channel.getDonorDonations(DonorID);
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getDonorDonationsAsync(int DonorID) {
            return base.Channel.getDonorDonationsAsync(DonorID);
        }
        
        public CodingPackFrontRevised.ServiceReference2.User getUser(int UserID) {
            return base.Channel.getUser(UserID);
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User> getUserAsync(int UserID) {
            return base.Channel.getUserAsync(UserID);
        }
        
        public CodingPackFrontRevised.ServiceReference2.User getUserB(string email) {
            return base.Channel.getUserB(email);
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User> getUserBAsync(string email) {
            return base.Channel.getUserBAsync(email);
        }
        
        public CodingPackFrontRevised.ServiceReference2.Campaign getCampaign(int CampaignID) {
            return base.Channel.getCampaign(CampaignID);
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Campaign> getCampaignAsync(int CampaignID) {
            return base.Channel.getCampaignAsync(CampaignID);
        }
        
        public CodingPackFrontRevised.ServiceReference2.Donation getDonation(int DonationID) {
            return base.Channel.getDonation(DonationID);
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation> getDonationAsync(int DonationID) {
            return base.Channel.getDonationAsync(DonationID);
        }
        
        public bool AddDonation(int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code) {
            return base.Channel.AddDonation(donorid, type, description, image, pickupdate, pickupaddress, quantity, status, code);
        }
        
        public System.Threading.Tasks.Task<bool> AddDonationAsync(int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code) {
            return base.Channel.AddDonationAsync(donorid, type, description, image, pickupdate, pickupaddress, quantity, status, code);
        }
        
        public bool editDonation(int donationid, int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code) {
            return base.Channel.editDonation(donationid, donorid, type, description, image, pickupdate, pickupaddress, quantity, status, code);
        }
        
        public System.Threading.Tasks.Task<bool> editDonationAsync(int donationid, int donorid, string type, string description, string image, string pickupdate, string pickupaddress, int quantity, string status, string code) {
            return base.Channel.editDonationAsync(donationid, donorid, type, description, image, pickupdate, pickupaddress, quantity, status, code);
        }
        
        public CodingPackFrontRevised.ServiceReference2.Donation[] getAllDonations() {
            return base.Channel.getAllDonations();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getAllDonationsAsync() {
            return base.Channel.getAllDonationsAsync();
        }
        
        public CodingPackFrontRevised.ServiceReference2.Donation[] getAllRequests() {
            return base.Channel.getAllRequests();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getAllRequestsAsync() {
            return base.Channel.getAllRequestsAsync();
        }
        
        public CodingPackFrontRevised.ServiceReference2.Donation[] getAllApproved() {
            return base.Channel.getAllApproved();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Donation[]> getAllApprovedAsync() {
            return base.Channel.getAllApprovedAsync();
        }
        
        public int[] getFrequestDonors() {
            return base.Channel.getFrequestDonors();
        }
        
        public System.Threading.Tasks.Task<int[]> getFrequestDonorsAsync() {
            return base.Channel.getFrequestDonorsAsync();
        }
        
        public CodingPackFrontRevised.ServiceReference2.User[] getAllUsers() {
            return base.Channel.getAllUsers();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User[]> getAllUsersAsync() {
            return base.Channel.getAllUsersAsync();
        }
        
        public int getDonors() {
            return base.Channel.getDonors();
        }
        
        public System.Threading.Tasks.Task<int> getDonorsAsync() {
            return base.Channel.getDonorsAsync();
        }
        
        public int getAdmins() {
            return base.Channel.getAdmins();
        }
        
        public System.Threading.Tasks.Task<int> getAdminsAsync() {
            return base.Channel.getAdminsAsync();
        }
        
        public int getDrivers() {
            return base.Channel.getDrivers();
        }
        
        public System.Threading.Tasks.Task<int> getDriversAsync() {
            return base.Channel.getDriversAsync();
        }
        
        public int getCampaigns() {
            return base.Channel.getCampaigns();
        }
        
        public System.Threading.Tasks.Task<int> getCampaignsAsync() {
            return base.Channel.getCampaignsAsync();
        }
        
        public int countAllDonations() {
            return base.Channel.countAllDonations();
        }
        
        public System.Threading.Tasks.Task<int> countAllDonationsAsync() {
            return base.Channel.countAllDonationsAsync();
        }
        
        public int countAllFrequentDonors() {
            return base.Channel.countAllFrequentDonors();
        }
        
        public System.Threading.Tasks.Task<int> countAllFrequentDonorsAsync() {
            return base.Channel.countAllFrequentDonorsAsync();
        }
        
        public int bestDonor() {
            return base.Channel.bestDonor();
        }
        
        public System.Threading.Tasks.Task<int> bestDonorAsync() {
            return base.Channel.bestDonorAsync();
        }
        
        public int countbestdonations() {
            return base.Channel.countbestdonations();
        }
        
        public System.Threading.Tasks.Task<int> countbestdonationsAsync() {
            return base.Channel.countbestdonationsAsync();
        }
        
        public int countDonorDonations(int id) {
            return base.Channel.countDonorDonations(id);
        }
        
        public System.Threading.Tasks.Task<int> countDonorDonationsAsync(int id) {
            return base.Channel.countDonorDonationsAsync(id);
        }
        
        public int countClothesDonations() {
            return base.Channel.countClothesDonations();
        }
        
        public System.Threading.Tasks.Task<int> countClothesDonationsAsync() {
            return base.Channel.countClothesDonationsAsync();
        }
        
        public int countFoodDonations() {
            return base.Channel.countFoodDonations();
        }
        
        public System.Threading.Tasks.Task<int> countFoodDonationsAsync() {
            return base.Channel.countFoodDonationsAsync();
        }
        
        public CodingPackFrontRevised.ServiceReference2.User[] getAllAdmin() {
            return base.Channel.getAllAdmin();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User[]> getAllAdminAsync() {
            return base.Channel.getAllAdminAsync();
        }
        
        public CodingPackFrontRevised.ServiceReference2.User[] getAllDonors() {
            return base.Channel.getAllDonors();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.User[]> getAllDonorsAsync() {
            return base.Channel.getAllDonorsAsync();
        }
        
        public bool AddCampaign(string name, string description, string datefrom, string dateto, string fundraiser, string location) {
            return base.Channel.AddCampaign(name, description, datefrom, dateto, fundraiser, location);
        }
        
        public System.Threading.Tasks.Task<bool> AddCampaignAsync(string name, string description, string datefrom, string dateto, string fundraiser, string location) {
            return base.Channel.AddCampaignAsync(name, description, datefrom, dateto, fundraiser, location);
        }
        
        public bool editCampaign(int campaignid, string name, string description, string datefrom, string dateto, string fundraiser, string location) {
            return base.Channel.editCampaign(campaignid, name, description, datefrom, dateto, fundraiser, location);
        }
        
        public System.Threading.Tasks.Task<bool> editCampaignAsync(int campaignid, string name, string description, string datefrom, string dateto, string fundraiser, string location) {
            return base.Channel.editCampaignAsync(campaignid, name, description, datefrom, dateto, fundraiser, location);
        }
        
        public CodingPackFrontRevised.ServiceReference2.Campaign[] getAllCampaigns() {
            return base.Channel.getAllCampaigns();
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Campaign[]> getAllCampaignsAsync() {
            return base.Channel.getAllCampaignsAsync();
        }
        
        public bool collecteddonations() {
            return base.Channel.collecteddonations();
        }
        
        public System.Threading.Tasks.Task<bool> collecteddonationsAsync() {
            return base.Channel.collecteddonationsAsync();
        }
        
        public int[] clothesdonationspermonth() {
            return base.Channel.clothesdonationspermonth();
        }
        
        public System.Threading.Tasks.Task<int[]> clothesdonationspermonthAsync() {
            return base.Channel.clothesdonationspermonthAsync();
        }
        
        public int[] fooddonationspermonth() {
            return base.Channel.fooddonationspermonth();
        }
        
        public System.Threading.Tasks.Task<int[]> fooddonationspermonthAsync() {
            return base.Channel.fooddonationspermonthAsync();
        }
        
        public int donationsperyear() {
            return base.Channel.donationsperyear();
        }
        
        public System.Threading.Tasks.Task<int> donationsperyearAsync() {
            return base.Channel.donationsperyearAsync();
        }
        
        public int scheduledriver(int donationid, int driverid) {
            return base.Channel.scheduledriver(donationid, driverid);
        }
        
        public System.Threading.Tasks.Task<int> scheduledriverAsync(int donationid, int driverid) {
            return base.Channel.scheduledriverAsync(donationid, driverid);
        }
        
        public CodingPackFrontRevised.ServiceReference2.Schedule[] drivertasks(int driverid) {
            return base.Channel.drivertasks(driverid);
        }
        
        public System.Threading.Tasks.Task<CodingPackFrontRevised.ServiceReference2.Schedule[]> drivertasksAsync(int driverid) {
            return base.Channel.drivertasksAsync(driverid);
        }
        
        public int saveimage(string path) {
            return base.Channel.saveimage(path);
        }
        
        public System.Threading.Tasks.Task<int> saveimageAsync(string path) {
            return base.Channel.saveimageAsync(path);
        }
        
        public string returnimage(int id) {
            return base.Channel.returnimage(id);
        }
        
        public System.Threading.Tasks.Task<string> returnimageAsync(int id) {
            return base.Channel.returnimageAsync(id);
        }
        
        public string returnrandomstring() {
            return base.Channel.returnrandomstring();
        }
        
        public System.Threading.Tasks.Task<string> returnrandomstringAsync() {
            return base.Channel.returnrandomstringAsync();
        }
    }
}
